import os
import json
import re
from google.cloud import vision

class TitleExtractor:
    """
    Extracts figure titles/captions from images using Google Cloud Vision OCR,
    and updates JSON metadata files generated by the GraphDetector.
    """

    def __init__(self, credentials_path: str):
        os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = credentials_path
        self.client = vision.ImageAnnotatorClient()

    def extract_titles(self, image_path: str):
        """
        Run OCR on an image and return a list of figure captions with bounding boxes.
        """
        with open(image_path, "rb") as image_file:
            content = image_file.read()

        image = vision.Image(content=content)
        response = self.client.text_detection(image=image)

        if response.error.message:
            raise Exception(response.error.message)

        texts = response.text_annotations
        figure_data = []

        if texts:
            full_text = texts[0].description
            lines = full_text.splitlines()

            words = [
                {"text": w.description, "bbox": [(v.x, v.y) for v in w.bounding_poly.vertices]}
                for w in texts[1:]
            ]

            for i, line in enumerate(lines):
                if re.match(r"^Figure\s+\d+", line.strip(), re.IGNORECASE):
                    caption = line.strip()
                    if i + 1 < len(lines) and not re.match(r"^Figure\s+\d+", lines[i+1].strip(), re.IGNORECASE):
                        caption += " " + lines[i+1].strip()
                    figure_data.append({"caption": caption})
        return figure_data

    def update_json_with_titles(self, image_path: str, json_dirs: list):
        """
        Extracts titles from the image and injects them into diagram JSON files.
        
        Args:
            image_path (str): path to the original page image
            json_dirs (list): list of paths to JSON files created by GraphDetector
        """
        titles = self.extract_titles(image_path)

        if not titles:
            print(f"No titles found for {image_path}")
            return

        # Naively map titles to diagrams in order (first title -> first diagram, etc.)
        for idx, json_path in enumerate(json_dirs):
            if not os.path.exists(json_path):
                continue
            with open(json_path, "r", encoding="utf-8") as f:
                data = json.load(f)

            if idx < len(titles):
                data["title"] = titles[idx]["caption"]
            else:
                data["title"] = None  # No matching caption

            with open(json_path, "w", encoding="utf-8") as f:
                json.dump(data, f, indent=4, ensure_ascii=False)

            print(f"Updated {json_path} with title: {data['title']}")
